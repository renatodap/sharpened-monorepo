name: CourtSync CI/CD

on:
  push:
    branches: [ main, develop, 'feature/courtsync-*' ]
    paths: [ 'apps/courtsync/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'apps/courtsync/**' ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Quality Gates
  quality:
    name: 🧪 Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/courtsync
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: apps/courtsync/pnpm-lock.yaml
          
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Lint
        run: pnpm run lint
        
      - name: 🎨 Check formatting
        run: pnpm run format:check
        
      - name: 🏗️ Type check
        run: pnpm run typecheck
        
      - name: 📊 Bundle analysis
        run: pnpm run analyze
        env:
          ANALYZE: true

  # Unit & Integration Tests
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/courtsync
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: courtsync_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: apps/courtsync/pnpm-lock.yaml
          
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🗄️ Setup test database
        run: pnpm run db:reset
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/courtsync_test
          DATABASE_ADAPTER: local
          
      - name: 🧪 Run tests
        run: pnpm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/courtsync_test
          DATABASE_ADAPTER: local
          
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/courtsync/coverage/lcov.info
          flags: courtsync
          name: courtsync-coverage

  # Build Test
  build:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/courtsync
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: apps/courtsync/pnpm-lock.yaml
          
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🏗️ Build application
        run: pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://fake-url.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: fake-anon-key
          DATABASE_ADAPTER: supabase
          
      - name: 📊 Check bundle size
        run: |
          BUILD_SIZE=$(du -sh .next | cut -f1)
          echo "Build size: $BUILD_SIZE"
          # Add bundle size check logic here

  # E2E Tests (only on labeled PRs to save resources)
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'run-e2e')
    defaults:
      run:
        working-directory: apps/courtsync
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: courtsync_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: apps/courtsync/pnpm-lock.yaml
          
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
        
      - name: 🗄️ Setup test database
        run: pnpm run db:reset && pnpm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/courtsync_test
          DATABASE_ADAPTER: local
          
      - name: 🏗️ Build application
        run: pnpm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/courtsync_test
          DATABASE_ADAPTER: local
          
      - name: 🚀 Start application
        run: pnpm run start &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/courtsync_test
          DATABASE_ADAPTER: local
          PORT: 3001
          
      - name: ⏳ Wait for app
        run: npx wait-on http://localhost:3001
        
      - name: 🎭 Run E2E tests
        run: pnpm run e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3001
          
      - name: 📊 Upload E2E results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: apps/courtsync/playwright-report/
          retention-days: 7

  # Security Scan
  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/courtsync
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: apps/courtsync/pnpm-lock.yaml
          
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Audit dependencies
        run: pnpm audit --audit-level moderate
        
      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript,typescript

  # Performance Budget Check
  performance:
    name: ⚡ Performance Budget
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: apps/courtsync
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: apps/courtsync/pnpm-lock.yaml
          
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🏗️ Build for analysis
        run: pnpm run build
        env:
          ANALYZE: true
          NEXT_PUBLIC_SUPABASE_URL: https://fake-url.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: fake-anon-key
          
      - name: 📊 Check bundle size budget
        run: |
          # Check if main JS bundle is under 200KB
          JS_SIZE=$(find .next/static/chunks -name "*.js" -exec du -cb {} + | grep total$ | cut -f1)
          JS_SIZE_KB=$((JS_SIZE / 1024))
          echo "JavaScript bundle size: ${JS_SIZE_KB}KB"
          if [ $JS_SIZE_KB -gt 200 ]; then
            echo "❌ JavaScript bundle size exceeds 200KB budget"
            exit 1
          else
            echo "✅ JavaScript bundle size within budget"
          fi

  # Path-based filtering check
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      courtsync: ${{ steps.changes.outputs.courtsync }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            courtsync:
              - 'apps/courtsync/**'

  # Status check
  status:
    name: ✅ Status Check
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()
    
    steps:
      - name: ✅ All checks passed
        if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
        run: echo "All quality gates passed! 🎉"
        
      - name: ❌ Some checks failed
        if: ${{ needs.quality.result != 'success' || needs.test.result != 'success' || needs.build.result != 'success' || needs.security.result != 'success' }}
        run: |
          echo "Some quality gates failed:"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          exit 1